
Conversión de Tipos en C#

1. Conversión Implícita (Automática):
En algunos casos, el compilador realiza automáticamente la conversión entre tipos sin necesidad de intervención del programador. Esto ocurre cuando no hay pérdida de datos entre los tipos.

Ejemplos:
- De `int` a `float` o `double`:
  int numeroEntero = 10;
  double numeroDecimal = numeroEntero;  // Conversión implícita

- De `float` a `double`:
  float numeroFloat = 3.14f;
  double numeroDouble = numeroFloat;  // Conversión implícita

2. Conversión Explícita (Type Casting):
Cuando el compilador no puede realizar la conversión automáticamente, se debe usar un **type cast** explícito.

Ejemplos:
- De `double` a `int` (puede perder la parte decimal):
  double numeroDecimal = 9.78;
  int numeroEntero = (int)numeroDecimal;  // Conversión explícita

- De `float` a `int` (pierde la parte decimal):
  float numeroFloat = 3.99f;
  int numeroEntero = (int)numeroFloat;  // Conversión explícita

3. Conversión Usando Métodos de Conversión Estática (Convert):
La clase `Convert` permite realizar conversiones entre varios tipos de manera segura.

Ejemplo:
  double numeroDecimal = 9.78;
  int numeroEntero = Convert.ToInt32(numeroDecimal);  // Convertir de double a int

Métodos comunes:
- `Convert.ToInt32()`
- `Convert.ToDouble()`
- `Convert.ToString()`
- `Convert.ToBoolean()`

Ejemplo de conversión de `string` a `int`:
  string texto = "123";
  int numero = Convert.ToInt32(texto);  // Convierte un string a int

4. Métodos de Parseo (Parse):
La función `Parse` también convierte entre tipos, pero puede lanzar excepciones si el valor no es convertible.

Ejemplo:
  string texto = "456";
  int numero = int.Parse(texto);  // Convierte un string a int

Excepciones comunes:
- Si el string no puede convertirse en el tipo deseado, lanzará una excepción `FormatException`.

Uso de TryParse (para evitar excepciones):
  string texto = "789";
  int numero;
  bool exito = int.TryParse(texto, out numero);  // Devuelve 'true' si la conversión es exitosa

5. Conversión entre Tipos Personalizados (Clase o Estructura):
Puedes definir conversiones personalizadas entre tipos en tus propias clases o estructuras usando los operadores de conversión.

Ejemplo:
  public class Punto
  {
      public int X { get; set; }
      public int Y { get; set; }

      // Conversión explícita de Punto a tupla
      public static explicit operator (int, int)(Punto p)
      {
          return (p.X, p.Y);
      }
  }

  Punto p = new Punto { X = 10, Y = 20 };
  var tupla = (ValueTuple<int, int>)p;  // Conversión explícita

Resumen de Conversión de Tipos:

Tipo de Conversión        | Descripción                                | Ejemplo
---------------------------|--------------------------------------------|---------
Implícita (Automática)      | El compilador realiza la conversión sin intervención. | `int -> double`
Explícita (Type Casting)    | Se usa `(tipo)valor` para realizar la conversión, con posible pérdida de datos. | `double -> int`
Método Convert              | Uso de la clase `Convert` para una conversión más segura y controlada. | `Convert.ToInt32()`
Parse                       | Usa `int.Parse()` o `double.Parse()` para convertir un `string` en un número. | `int.Parse()`
TryParse                    | Evita excepciones con `TryParse()` al intentar convertir un `string`. | `int.TryParse()`
Conversión Personalizada    | Definir conversiones explícitas entre tipos personalizados usando operadores. | `(Punto -> (int, int))`

